{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Search.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","Name","email","id","className","alt","src","Cardlist","robots","component","map","a","i","key","name","username","Search","searchfield","searchchange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onsearchchange","event","setState","target","value","state","fetch","then","response","json","user","this","filterrobots","filter","robot","toLowerCase","includes","length","class","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sOAkBeA,EAfJ,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GAExB,OAEA,yBAAKC,UAAU,wFACf,yBAAKC,IAAI,QAAQC,IAAG,gCAA4BH,EAA5B,UACpB,6BACC,4BAAKF,GACL,2BAAIC,MCOSK,EAdC,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACVC,EAAUD,EAAOE,KAAI,SAACC,EAAEC,GAE7B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGT,GAAIK,EAAOI,GAAGT,GAAIF,KAAMO,EAAOI,GAAGE,KAAMC,SAAUP,EAAOI,GAAGG,SAAUb,MAAOM,EAAOI,GAAGV,WAI9G,OACC,6BACEO,ICEWO,EAbF,SAAC,GAA8B,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAE3B,OACC,6BAEC,2BAAOC,KAAK,SAASf,UAAU,6CAC9BgB,YAAY,iBACZC,SAAUH,MCECI,EARF,SAACC,GACb,OACC,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAO,kBAAkBC,OAAS,UAClEJ,EAAMK,WCgEMC,G,wDA1Dd,aAAc,IAAD,8BACb,gBAeDC,eAAe,SAACC,GAEf,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAhBzC,EAAKC,MAAM,CACX3B,OAAQ,GACRS,YAAY,IAJC,E,gEASM,IAAD,OAElBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GACvC,EAAKR,SAAS,CAACxB,OAAOgC,S,+BAWtB,IAAD,EAC8BC,KAAKN,MAA3B3B,EADR,EACQA,OAAQS,EADhB,EACgBA,YAETyB,EAAalC,EAAOmC,QAAO,SAACC,GAElC,OAAOA,EAAM9B,KAAK+B,cAAcC,SAAS7B,EAAY4B,kBAGrD,OAAmB,IAAhBrC,EAAOuC,OAEF,wBAAIC,MAAM,KAAV,WAKP,yBAAK5C,UAAU,MACd,2CACA,kBAAC,EAAD,CAAQc,aAAcuB,KAAKX,iBAC3B,kBAAC,EAAD,KAEC,kBAAC,EAAD,CAAUtB,OAAQkC,U,GA7CJO,IAAMC,Y,MCCLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.264f9c08.chunk.js","sourcesContent":["\r\n import React from 'react';\r\n\r\nconst Card=({Name ,email,id})=>{\r\n\r\n\treturn(\r\n\r\n\t<div className='bg-washed-red tc br3 pa10 ma2  link black dim db mw5 pa3 ba b--black-10 shadow-1 dib'>\r\n\t<img alt=\"robot\" src= {`https://robohash.org/k${id}ahdk`}/>\r\n\t<div>\r\n\t\t<h2>{Name }</h2>\r\n\t\t<p>{email}</p>\r\n\t</div>\r\n\t</div>\r\n\r\n\t\t)\r\n}\r\n\r\nexport default Card;  ","import React from 'react';\r\nimport Card from './Card'\r\n\r\n\r\n const Cardlist=({robots})=>{\r\n \tconst component=robots.map((a,i)=>\r\n \t{\r\n \t\treturn <Card key={i} id={robots[i].id} Name={robots[i].name} username={robots[i].username} email={robots[i].email } />\r\n \t}\r\n \t)\r\n \t\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{component}\r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Cardlist;","import React from 'react'\r\n\r\nconst Search=({searchfield, searchchange})=>{\r\n\r\n\treturn(\r\n\t\t<div >\r\n\r\n\t\t\t<input type='search' className=\" shadow-5 pa3 ba b--blue  bg-lightest-blue\" \r\n\t\t\t placeholder=' Search Robots'\r\n\t\t\t onChange={searchchange}/>\r\n\t\t\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Search;","import React from 'react'\r\n\r\n\r\nconst Scroll=(props)=>{\r\n\treturn(\r\n\t\t<div style={{overflow :'scroll' ,border:'5px solid black',height : '550px' }}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Scroll ","import React from 'react';\r\nimport Cardlist from'../components/Cardlist'\r\nimport Search from '../components/Search'\r\nimport Scroll from '../components/Scroll'\r\n// import Errorboundary from '../components/Errorboundary'\r\n \r\n\r\n\r\nimport './App.css'\r\n\r\n\r\nclass  App extends React.Component{\r\n\tconstructor(){\r\n\tsuper()\r\n\tthis.state={\r\n\trobots :[],\r\n\tsearchfield:''\r\n\r\n\t}\r\n}\r\n\r\ncomponentDidMount(){\r\n\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=>  response.json()).then(user=>{\r\n\t\tthis.setState({robots:user})\r\n\t})\r\n}\r\nonsearchchange=(event)=>\r\n{\r\n\tthis.setState({searchfield: event.target.value})\r\n\t\r\n\t\r\n}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst {robots, searchfield}= this.state;\r\n\r\n\t\tconst filterrobots=robots.filter((robot)=>{\r\n\r\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t})\r\n\t\t\r\n\t\tif(robots.length===0)\r\n\t\t{\r\n\t\t\treturn <h1 class=\"a\">LOADING</h1>\r\n\t\t}\r\n\t\telse\r\n\t\t{\t\t\r\n\t\t\treturn (\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<h1>ROBOFRIENDS</h1>\r\n\t\t\t\t<Search searchchange={this.onsearchchange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<Cardlist robots={filterrobots} />\r\n\t\t\t\t\t\r\n\t\t\t\t</Scroll>\r\n\t\t\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n\r\n\t\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport'tachyons' \nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}